{"ast":null,"code":"import { HttpParams } from '@angular/common/http';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class GifsService {\n  constructor(httpCliente) {\n    this.httpCliente = httpCliente;\n    this.gifsService = 'https://api.giphy.com/v1/gifs';\n    this.apiKey = '6FhKagDwbcLKW54Cn29d0QvNpjcz59iX';\n    this._historial = [];\n    // Cambiar any por su tipo\n    this.resultados = [];\n    this._historial = JSON.parse(localStorage.getItem('historial')) || [];\n    this.resultados = JSON.parse(localStorage.getItem('resultados')) || [];\n  }\n  get historial() {\n    return [...this._historial];\n  }\n  buscar(item) {\n    if (item.trim().length == 0) {\n      return;\n    }\n    item = item.trim().toLowerCase();\n    if (!this._historial.includes(item)) {\n      this._historial.unshift(item);\n    }\n    this._historial = this._historial.splice(0, 10);\n    localStorage.setItem('historial', JSON.stringify(this._historial));\n    const params = new HttpParams().set('api_key', this.apiKey).set('q', item).set('limit', 10);\n    this.httpCliente.get(`${this.gifsService}/search`, {\n      params\n    }).subscribe(response => {\n      this.resultados = response.data;\n      localStorage.setItem('resultados', JSON.stringify(this.resultados));\n    });\n  }\n}\nGifsService.ɵfac = function GifsService_Factory(t) {\n  return new (t || GifsService)(i0.ɵɵinject(i1.HttpClient));\n};\nGifsService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: GifsService,\n  factory: GifsService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"AAAA,SAAqBA,UAAU,QAAQ,sBAAsB;;;AAO7D,OAAM,MAAOC,WAAW;EAWtBC,YACUC,WAAuB;IAAvB,gBAAW,GAAXA,WAAW;IAXb,gBAAW,GAAW,+BAA+B;IACrD,WAAM,GAAW,kCAAkC;IACnD,eAAU,GAAa,EAAE;IAEjC;IACO,eAAU,GAAU,EAAE;IAQ3B,IAAI,CAACC,UAAU,GAAGC,IAAI,CAACC,KAAK,CAACC,YAAY,CAACC,OAAO,CAAC,WAAW,CAAE,CAAC,IAAI,EAAE;IACtE,IAAI,CAACC,UAAU,GAAGJ,IAAI,CAACC,KAAK,CAACC,YAAY,CAACC,OAAO,CAAC,YAAY,CAAE,CAAC,IAAG,EAAE;EACxE;EATA,IAAIE,SAAS;IACX,OAAO,CAAC,GAAG,IAAI,CAACN,UAAU,CAAC;EAC7B;EASAO,MAAM,CAACC,IAAW;IAChB,IAAGA,IAAI,CAACC,IAAI,EAAE,CAACC,MAAM,IAAI,CAAC,EAAC;MACzB;;IAEFF,IAAI,GAAGA,IAAI,CAACC,IAAI,EAAE,CAACE,WAAW,EAAE;IAChC,IAAG,CAAC,IAAI,CAACX,UAAU,CAACY,QAAQ,CAACJ,IAAI,CAAC,EAAC;MACjC,IAAI,CAACR,UAAU,CAACa,OAAO,CAACL,IAAI,CAAC;;IAE/B,IAAI,CAACR,UAAU,GAAG,IAAI,CAACA,UAAU,CAACc,MAAM,CAAC,CAAC,EAAC,EAAE,CAAC;IAC9CX,YAAY,CAACY,OAAO,CAAC,WAAW,EAAEd,IAAI,CAACe,SAAS,CAAC,IAAI,CAAChB,UAAU,CAAC,CAAC;IAElE,MAAMiB,MAAM,GAAG,IAAIrB,UAAU,EAAE,CACZsB,GAAG,CAAC,SAAS,EAAE,IAAI,CAACC,MAAM,CAAC,CAC3BD,GAAG,CAAC,GAAG,EAAEV,IAAI,CAAC,CACdU,GAAG,CAAC,OAAO,EAAE,EAAE,CAAC;IAGnC,IAAI,CAACnB,WAAW,CAACqB,GAAG,CAAqB,GAAG,IAAI,CAACC,WAAW,SAAS,EAAE;MAACJ;IAAM,CAAC,CAAC,CAACK,SAAS,CACvFC,QAAQ,IAAG;MACV,IAAI,CAAClB,UAAU,GAAGkB,QAAQ,CAACC,IAAI;MAC/BrB,YAAY,CAACY,OAAO,CAAC,YAAY,EAAEd,IAAI,CAACe,SAAS,CAAC,IAAI,CAACX,UAAU,CAAC,CAAC;IACrE,CAAC,CACF;EACH;;;mBAzCWR,WAAW;AAAA;;SAAXA,WAAW;EAAA4B,SAAX5B,WAAW;EAAA6B,YAFV;AAAM","names":["HttpParams","GifsService","constructor","httpCliente","_historial","JSON","parse","localStorage","getItem","resultados","historial","buscar","item","trim","length","toLowerCase","includes","unshift","splice","setItem","stringify","params","set","apiKey","get","gifsService","subscribe","response","data","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\gianf\\web projects\\gifs-party\\src\\app\\gifs\\services\\gifs.service.ts"],"sourcesContent":["import { HttpClient, HttpParams } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { Gif, SearchGifsResponse } from '../interfaces/gifs.interface';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class GifsService {\r\n  private gifsService: string = 'https://api.giphy.com/v1/gifs';\r\n  private apiKey: string = '6FhKagDwbcLKW54Cn29d0QvNpjcz59iX';\r\n  private _historial: string[] = []\r\n\r\n  // Cambiar any por su tipo\r\n  public resultados: Gif[] = [];\r\n  get historial(){\r\n    return [...this._historial];\r\n  }\r\n\r\n  constructor(\r\n    private httpCliente: HttpClient\r\n  ){\r\n    this._historial = JSON.parse(localStorage.getItem('historial')!) || [];\r\n    this.resultados = JSON.parse(localStorage.getItem('resultados')!)|| [];\r\n  }\r\n\r\n  buscar(item:string){\r\n    if(item.trim().length == 0){\r\n      return;\r\n    }\r\n    item = item.trim().toLowerCase();\r\n    if(!this._historial.includes(item)){\r\n      this._historial.unshift(item);\r\n    }\r\n    this._historial = this._historial.splice(0,10);\r\n    localStorage.setItem('historial', JSON.stringify(this._historial));\r\n\r\n    const params = new HttpParams().\r\n                       set('api_key', this.apiKey)\r\n                      .set('q', item)\r\n                      .set('limit', 10)\r\n\r\n\r\n    this.httpCliente.get<SearchGifsResponse>(`${this.gifsService}/search`, {params}).subscribe(\r\n      (response)=>{\r\n        this.resultados = response.data;\r\n        localStorage.setItem('resultados', JSON.stringify(this.resultados));\r\n      }\r\n    )\r\n  }\r\n\r\n\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}